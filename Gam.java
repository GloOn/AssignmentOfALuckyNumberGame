import java.util.Scanner;
import java.lang.String;

/**
 * This class is about a game called "Lucky Guess Game".
 * This game is for a player to guess a number between 1-100, which randomly generated by the computer. 
 * For each "round" of the game, the player will have 3 chances to guess the number.
 * When the player guesses a number, his win/loss for that round is to be remembered 
 * by the program. At any point, the program can display how many wins/losses had occurred so far, 
 * how much is the total winning, and the percentage of wins.
 * 
 * @author Jing Guo 
 * @version Assignment 1 of FIT5131(due day: 12/9/2014)
 */

public class Gam
{
    // a player who play this game.
    private Player player;
    // the lucky number that the computer generate.
    private LuckyNumberGenerator luckyNumber;
    private Scanner scan;
    
    /**
     * Constructor for objects of class Game
     */
    public Gam()
    {
        player = null;
        luckyNumber = null;
        this.scan = new Scanner(System.in);
        startGame();
    }
    
    /**
     * This method is used to compare two integer a and b to find out the relationship
     * between them, and boolean isFinal is used to judge if the compare is the final once.
     *
     * Used in the playOneRound() method.
     */
    public boolean compare(int a, int b, boolean isFinal)
    {
        boolean isWin = false;
        if (a == b)
        {
            System.out.print("win");
            player.winOneRound(10);
            isWin = true;
        }
        else
        {
            if (isFinal)
            {    
                if(b-a <= 5 && a-b <= 5 )
                {System.out.print("5");
                    player.winOneRound(5);}
                else
                    {System.out.print("lose");player.lossOneRound();
            
                    
                    }
                }
            else
           {
                if(a>b)
                    System.out.print("lower");
                else
                    System.out.print("higher");
            }
        }
        return isWin;
    }
    
    /**
     * Create a player by enter his/her name.
     *
     * Option 1 in the Game.
     */
    private void createPlayer()
    {
        System.out.println("Please enter your player name : ");
        //input the player's name

        String name = scan.nextLine();
        //check the input string
        if (name != null && !"".equals(name))
        {
            player = new Player();
            player.setName(name); 
            System.out.println("Current player name is " + name + ".\n");
        }
        else
            System.out.println("Player name cannot be null. Please enter again.\n");
    }
    
    /**
     * This method is used to display the Help.
     * Option 4 in the Game.
     */
    private void displayGameHelp()
    {
        String displayStr = "";
        displayStr += "Hello! Welcome to Lucky Guess Game!";
        displayStr += "\nThis HELP is to help you play this game better. ";
        displayStr += "\nInitially, you must enter your username to ";
        displayStr += " \n";
        displayStr += "\ncreate a new role, then you can choose to ";
        displayStr += "\nstart a round or display your wins statistics or ";
        displayStr += "\nexit the game. For one round of the game, you ";
        displayStr += "\nwill have 3 chances to guess the lucky number. ";
        displayStr += "\nYou will find a Menu display when you set up ";
        displayStr += "\nthe game. ";
        displayStr += " \n";
        displayStr += "\nOption (1) enter a name for the 'player'. Your ";
        displayStr += "\nname must not be blank. If this option is chosen ";
        displayStr += "\nagain after a player has already been set up, a ";
        displayStr += "'\nnew' player is set up – there is only ever one ";
        displayStr += "\nplayer at any one time. ";
        displayStr += " \n";
        displayStr += "\nOption (2) guess a number between 1-100. You ";
        displayStr += "\nhave 3 chances to guess the lucky number. If ";
        displayStr += "\nyou guessed it correctly, you can win $10, ";
        displayStr += "\notherwise you can guess again, up to a ";
        displayStr += "\nmaximum of 3 times for each round. If none of ";
        displayStr += "\nthe 3 guesses is an exact match of the lucky ";
        displayStr += "\nnumber, you win nothing. However, if your final ";
        displayStr += "\nguess is within ±5 of the lucky number, you can ";
        displayStr += "\nalso win a consolation prize of $5. ";
        displayStr += " \n";
        displayStr += "\nOption (3) display your wins statistics. Display ";
        displayStr += "\nthe number of your total wins and losses, plus ";
        displayStr += "\nthe amount won. ";
        displayStr += " \n";
        System.out.println(displayStr);
    }
    
    /**
     * This method is used to display player wins statistics
     * Option 3 in the Game.
     */
    private void displayWinsStatistics()
    {
        //chect if already create a player
        if (player != null)
        {
            System.out.print("Player " + player.getName() + " has " + player.getWinNumber() + " win(s) and " + player.getLossNumber() + " loss(es)"); 
            System.out.println("==> Winning Percentage = " + getWinPerc() + "% .");
            System.out.println("Total Winnings : $" + player.getTotalOfWinning() + " .\n");
        }
        else
            System.out.println("You need to create a player role first. Please select Option(1).\n");
    }
    
    /**
     * print out the number of rounds
     */
    private float getWinPerc()
    {
        float displayWinPerc;
        // check if the player played 0 round
        int numOfRounds = player.getWinNumber() + player.getLossNumber();
        if(numOfRounds != 0)
        {
            float winPerc = 0;//get the percent of wins and losses
            winPerc = player.getWinNumber() / (float)numOfRounds;
            displayWinPerc = ((float)(int)(winPerc * 10000)) / 100;
        }
        else
            displayWinPerc = 0;
        return displayWinPerc;
    }
    
    /**
     * This method is used to judge if a String is numeric.
     * If the String is null or containing a string, then it return false.
     * If the String is all number, it return true.
     *
     * Used in the playOneRound() method.
     */
    private boolean isNumeric(String aString)
    {
        if (aString.length() == 0)//check if the input String is null.
            return false;
        int position = 0;
        while (position < aString.length())
        {
            char thisChar = aString.charAt(position);
            //check if all the char in the String is number.
            if (thisChar < '0' || thisChar > '9')
                return false;
            position++;
        }
        return true;
    }
    
    /**
     * Asks the player to guess a number between 1-100 and the computer
     * checks if the outcome lucky number matches the number guessed.
     *
     * Option 2 in the Game.
     */
    private void playOneRound()
    {
        //chect if already create a player
        if (player != null)
        {
            // Generate a lucky number
            LuckyNumberGenerator numberGenerator = new LuckyNumberGenerator();
            int luckyNumber = numberGenerator.getLuckyNumber();
            //System.out.println(luckyNumber);
            // Player begin to guess number
            System.out.print("Enter a number between 1-100 (up to 3 guesses):");
            String inputString;

            for (int i = 1; i < 4;)// Have 3 times to guess
            {
                inputString = scan.nextLine();
                // check if the input is a number
                if (isNumeric(inputString))
                {
                    int inputNumber = Integer.valueOf(inputString).intValue();
                    // check if the number is between 0 and 100
                    if (inputNumber <= 100 && inputNumber >= 0)
                    {
                        if (compare(inputNumber, luckyNumber, i == 3))
                            break;
                        i++;
                    }
                    else
                        System.out.println("Sorry, you need to enter an integer BETWEEN 1-100.");
                }
                else
                    System.out.println("Sorry, you need to enter an INTEGER between 1-100.");
            }
        }
        else
            System.out.println("You need to create a player role first. Please select Option(1).\n");
    }
    
    /**
     * Start a game and display the menu 
     */
    public void startGame()
    {
        while (1 > 0)
        {    
            String welcomeLine = (player != null) ? (player.getName() + ",w") : "W";
            String displayMenu = "";
            displayMenu += welcomeLine + "elcome to the Guessing Game!\n";
            displayMenu += "============================ \n";
            displayMenu += " (1) Change (or Set Up) Player \n";
            displayMenu += " (2) Play One Round \n";
            displayMenu += " (3) Display Player Wins Statistics \n";
            displayMenu += " (4) Display Game Help \n";
            displayMenu += " (5) Exit Game \n";
            displayMenu += "Choose an option : \n";
            System.out.print(displayMenu);

            String inputChoice = scan.nextLine();
            switch (inputChoice)
            {
                case "1" : createPlayer(); break;
                case "2" : playOneRound(); break;
                case "3" : displayWinsStatistics(); break;
                case "4" : displayGameHelp(); break;
                case "5" : System.exit(0); break;
                default:
                    System.out.println("Invalid input, please enter a choice\n"); break;
            }
        }
    }
}